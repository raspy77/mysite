[mysite db 만들기
1. # mysql -u root -p
2. MariaDB[(none)]> create database mysite;
3. MariaDB[(none)]> create user 'mysite'@'192.168.%.%' identified by 'mysite';
4. MariaDB[(none)]> grant all privileges on mysite.* to 'mysite'@'192.168.%.%';
5. MariaDB[(none)]> flush privileges;
6. workbench에서 접속테스트



[장고 프로젝트(mysite) 만들기]

1.
PyCharm에서 django_practices 프로젝트 만들기

2.
Django 설치
터미널에서
# pip install django

3.
mysqlclient 설치
터미널에서
pip install mysqlclient

4.
장고 프로젝트 생성
터미널에서
django-admin startproject django_practices)

5. 디렉토리 정리

6. settings.py 설정
    1) TIME_ZONE = 'Asia/Seoul'
    2) DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'mysite',
        'USER': 'mysite',
        'PASSWORD': 'mysite',
        'HOST': '192.168.1.131',
        'PORT': 3307
    		}
	}

7.
기본적으로 장고 프로젝트가 관리하는 테이블을 생성
터미널에서
python manage.py migrate

8.
장고 프로젝트 관리 애플리케이션의 관리자 계정 생성하기
터미널에서
python manage.py createsuperuser
(id: shk9339@naver.com / ps: admin


9. Application 들의 통합 templates 디렉토리 만들기
    1) mysite(프로젝트 루트)
            |----- templates
    2) settings.py 에 설정작업
         TEMPLATES 변수에 'DIRS': [os.path.join(BASE_DIR, 'templates')] 세팅한다.

10. /assets/**  URL을 /statics/** 경로로 매핑 (settings.py)
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'statics'),
    )
    STATIC_URL = '/assets/'

10. 지금까지 작업 내용 확인하기
1) 서버 시작하기
   터미널에서
   # python manage.py runserver 0.0.0.0:1111
2) 브라우저에서
   http://127.0.0.1:1111 로 접근


=======================================================================================================================

[mysite Application 만들기]
mysite
    |---- main       (with 강사)
    |---- guestbook  (과제)
    |---- user       (with 강사)
    |---- board      (평가과제)


1. main Application 만들기
    1) 터미널에서
       # python manage.py startapp main
    2) templates/main 디렉토리 생성
    3) Application 등록
        settings.py의 INSTALLED_APPS 에 추가 한다.
    -----------------------------------------------------------------------------
    4) url mapping (urls.py) url <----> view의 함수
    5> view 함수에서 template에 data 전달 및 render 결과 반환
    -----------------------------------------------------------------------------
    헬로우 추가하면 url,views 에 추가

2. guestbook Application 만들기
    1) 터미널에서
       # python manage.py startapp guestbook
    2) templates/guestbook 디렉토리 생성/확인
    3) Application 등록
        settings.py의 INSTALLED_APPS 에 추가 한다.
    -----------------------------------------------------------------------------
    4) url mapping (urls.py)  url <---> view의 함수
    5) view 함수에서 template에 data전달 및 render 결과 반환
    -----------------------------------------------------------------------------

3. user Application 만들기
    1) 터미널에서
       # python manage.py startapp user
    2) templates/user 디렉토리 생성/확인
    3) Application 등록
        settings.py의 INSTALLED_APPS 에 추가 한다.
    -----------------------------------------------------------------------------
    4) url mapping (urls.py)  url <---> view의 함수
    5) view 함수에서 template에 data전달 및 render 결과 반환
    -----------------------------------------------------------------------------